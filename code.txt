//========================================= USUARIOS ====================================================================================

app.post('/usuarios', async (req, res) => {
  const { email, password } = req.body;
  
  try {
    const usersCollection = (await connectToDatabase()).collection(userCollection);
    
    // Verificar si el usuario ya existe
    const existingUser = await usersCollection.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'El usuario ya est치 registrado' });
    }
    
    // Encriptar contrase침a
    const newUser = { email, password };
    
    await usersCollection.insertOne(newUser);
    res.status(201).json({ message: 'Usuario registrado correctamente' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error al registrar el usuario', error });
  }
});

app.get('/usuarios', async (req, res) => {
  try {
    const usersCollection = (await connectToDatabase()).collection(userCollection);
    const users = await usersCollection.find().toArray();
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error al obtener los usuarios', error });
  }
});

app.put('/usuarios/:id', async (req, res) => {
  const { id } = req.params;
  const { email, password } = req.body;
  
  try {
    if (!ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'El id no es v치lido' });
    }
    
    const usersCollection = (await connectToDatabase()).collection(userCollection);
    
    const updateData = {};
    if (email) updateData.email = email;
    if (password) {
      const { hashedPassword, salt } = hashPassword(password);
      updateData.password = hashedPassword;
      updateData.salt = salt;
    }
    
    const result = await usersCollection.updateOne(
      { _id: new ObjectId(id) },
      { $set: updateData }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ message: 'Usuario no encontrado' });
    }
    
    res.status(200).json({ message: 'Usuario actualizado correctamente' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error al actualizar el usuario', error });
  }
});

app.delete('/usuarios/:id', async (req, res) => {
  const { id } = req.params;
  
  try {
    if (!ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'El id no es v치lido' });
    }
    
    const usersCollection = (await connectToDatabase()).collection(userCollection);
    const result = await usersCollection.deleteOne({ _id: new ObjectId(id) });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'Usuario no encontrado' });
    }
    
    res.status(200).json({ message: 'Usuario eliminado correctamente' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error al eliminar el usuario', error });
  }
});